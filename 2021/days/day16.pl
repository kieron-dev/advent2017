% thanks to Russ Cox - https://www.youtube.com/watch?v=1EpWx2pPhJI

hex(`D2FE28`). % 2021
hex(`C200B40A82`). % 1 + 2 = 3
hex(`04005AC33890`). % 6 * 9 = 54
hex(`38006F45291200`).
hex(`EE00D40C823060`).
hex(`8A004A801A8002F478`).
hex(`620080001611562C8802118E34`).
hex(`C0015000016115A2E0802F182340`).
hex(`A0016C880162017C3686B18A3D4780`).
hex(``).

parse(S, P, BR):-
    hex(H),
    string_chars(S,H),
    hexbits(H,B),
    pkt(B, P, BR).

hexdigit(H,D):- H =< 0'9, D is H - 0'0.
hexdigit(H,D):- H >= 0'A, D is H - 0'A + 10.

hexdigits([],[]).
hexdigits([H|H1],[D|D1]):-
    hexdigit(H,D),
    hexdigits(H1,D1).

hexbits([], []).
hexbits([H|H1], [B3, B2, B1, B0 | BT]):-
    hexdigit(H, D),
    B3 is (D>>3) mod 2,
    B2 is (D>>2) mod 2,
    B1 is (D>>1) mod 2,
    B0 is (D>>0) mod 2,
    hexbits(H1, BT).

take(N, B, V, BR):- take(N, B, 0, V, BR).

take(0, B, A, A, B).
take(N, [B|B1], A, V, BR):-
    N > 0,
    N1 is N-1,
    A1 is A*2 + B,
    take(N1, B1, A1, V, BR).

header(B, V, T, BR):-
    take(3, B, V, B1),
    take(3, B1, T, BR).

pkt(B, N, BR):-
    header(B, _, 4, B1),
    !,
    number(B1, N, BR).

pkt(B, P, BR):-
    header(B, _, T, B1),
    T =\= 4,
    body(B1, V1, BR),
    oper(T, V1, P).

oper(0, P, S):- sum(P, S).
oper(1, P, S):- prod(P, S).
oper(2, P, S):- min(P, S).
oper(3, P, S):- max(P, S).
oper(5, [A, B], S):- greater(A, B, S).
oper(6, [A, B], S):- less(A, B, S).
oper(7, [A, B], S):- equal(A, B, S).

greater(A, B, 1):- A > B, !.
greater(_, _, 0).

less(A, B, 1):- A < B, !.
less(_, _, 0).

equal(A, B, 1):- A == B, !.
equal(_, _, 0).

max([P|P1], S):- max(P1, S), P < S, !.
max([P|_], P).

min([P|P1], S):- min(P1, S), P > S, !.
min([P|_], P).

prod([], 1).
prod([P|P1], S):-
    prod(P1, S1),
    S is P*S1.

sum([], 0).
sum([N|N1], S):-
    sum(N1, S1),
    S is N+S1.

body([0|B], P, BR):-
    take(15, B, N, B1),
    split(B1, N, B2, BR),
    allpkts(B2, P).

body([1|B], P, BR):-
    take(11, B, N, B1),
    pkts(B1, N, P, BR).

pkts(B, 0, [], B).
pkts(B, N, [P|P1], BR):-
    N > 0,
    pkt(B, P, B1),
    N1 is N-1,
    pkts(B1, N1, P1, BR).

split(B, 0, [], B).
split([B|B1], N, [B|BL], BR):-
    N > 0,
    N1 is N-1,
    split(B1, N1, BL, BR).

allpkts([], []).
allpkts(B, [P|P1]):-
    pkt(B, P, B1),
    allpkts(B1, P1).

number(B, N, BR):- number(B, 0, N, BR).
number([1|B], A, N, BR):-
    take(4, B, V, B1),
    A1 is 16*A+V,
    number(B1, A1, N, BR).
number([0|B], A, N, BR):-
    take(4, B, V, BR),
    N is A*16 + V.

/* vim: set filetype=prolog : */
